# -*- coding: utf-8 -*-
"""app1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14i5WCUmkXFyAUCY51_njIcALzTzGdRDL
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import ta
import requests
from bs4 import BeautifulSoup

# Set Streamlit page configuration
st.set_page_config(page_title="Kenya Trading Dashboard", layout="wide")
st.title("ðŸ“Š Kenya Trading Signals Dashboard")
st.markdown("Tracks technical indicators and generates BUY/SELL signals for NSE stocks. Includes scraping of the CBK Central Bank Rate.")

# --- Select NSE Ticker ---
tickers = ['EQTY.NR', 'BAT.NR', 'KCB.NR']
ticker = st.selectbox("Select NSE Ticker", tickers)

# --- Download Stock Data ---
data = yf.download(ticker, period='3mo', interval='1d')
if data.empty:
    st.warning("No data found for this ticker.")
    st.stop()

# --- Calculate Indicators ---
data.dropna(inplace=True)
data['RSI'] = ta.momentum.RSIIndicator(data['Close']).rsi()
data['SMA50'] = ta.trend.SMAIndicator(data['Close'], window=50).sma_indicator()
data['SMA200'] = ta.trend.SMAIndicator(data['Close'], window=200).sma_indicator()
data['Signal'] = 'HOLD'

# --- Generate Trading Signals ---
for i in range(1, len(data)):
    if data['RSI'].iloc[i] < 30:
        data.loc[data.index[i], 'Signal'] = 'BUY'
    elif data['RSI'].iloc[i] > 70:
        data.loc[data.index[i], 'Signal'] = 'SELL'
    elif data['SMA50'].iloc[i] > data['SMA200'].iloc[i] and data['SMA50'].iloc[i-1] <= data['SMA200'].iloc[i-1]:
        data.loc[data.index[i], 'Signal'] = 'BUY'
    elif data['SMA50'].iloc[i] < data['SMA200'].iloc[i] and data['SMA50'].iloc[i-1] >= data['SMA200'].iloc[i-1]:
        data.loc[data.index[i], 'Signal'] = 'SELL'

# --- Plotting Section ---
st.subheader(f"{ticker} Price & Signal Chart")
fig, ax = plt.subplots(figsize=(12, 5))
ax.plot(data['Close'], label='Close Price')
ax.plot(data['SMA50'], label='SMA50')
ax.plot(data['SMA200'], label='SMA200')
buy_signals = data[data['Signal'] == 'BUY']
sell_signals = data[data['Signal'] == 'SELL']
ax.scatter(buy_signals.index, buy_signals['Close'], marker='^', color='green', label='BUY')
ax.scatter(sell_signals.index, sell_signals['Close'], marker='v', color='red', label='SELL')
ax.set_title(f"{ticker} Trading Signals")
ax.grid()
ax.legend()
st.pyplot(fig)

# --- Latest Signal Summary ---
latest = data.iloc[-1]
st.markdown(f"""
### ðŸ“ˆ Latest Summary
- **Date:** {data.index[-1].date()}
- **Close Price:** {latest['Close']:.2f}
- **RSI:** {latest['RSI']:.2f}
- **Signal:** `{latest['Signal']}`
""")

# --- CBK Central Bank Rate ---
st.subheader("ðŸ“Œ Central Bank of Kenya Rate")
cbk_url = 'https://www.centralbank.go.ke/rates/central-bank-rate/'
res = requests.get(cbk_url)
soup = BeautifulSoup(res.content, 'html.parser')
rate_section = soup.find('div', class_='exchange-rate') or soup.find('td', string='Central Bank Rate (CBR)')
rate = rate_section.find_next('span').text.strip() if rate_section else 'N/A'
st.write(f"**CBK Central Bank Rate:** {rate}")

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit